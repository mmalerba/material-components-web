@import "./variables";

// ==Terminology==
// Feature:
//   A simple string (e.g. `color`) representing a cross-cutting feature in
//   Material.
// Feature query:
//   A structure that represents a query for a feature or combination of features. This may be
//   either a feature or a map containing `op` and `queries` fields. A single feature represents a
//   simple query for just that feature. A map represents a complex query made up of an operator,
//   `op`, applied to a list of sub-queries, `queries`.
//   (e.g. `color`, `(op: any, queries: (color, typography))`).
// Feature target:
//   A map that contains the feature being targeted as well as the current feature query. This is
//   the structure that is intended to be passed to the `@mdc-targets` mixin.
//   (e.g. `(target: color, query: (op: any, queries: (color, typography))`).

// Checks whether the given list contains the given item.
@function mdc-contains($list, $item) {
  @return index($list, $item) != null;
}

// Verifies that the given feature(s) are valid, throws an error otherwise.
@function mdc-verify-feature($features...) {
  @each $feature in $features {
    @if not mdc-contains($mdc-all-features, $feature) {
      @error "Invalid feature: '#{$feature}'. Valid features are: #{$mdc-all-features}.";
    }
  }

  @return true;
}

// Verifies that the given feature queries are valid, throws an error otherwise.
@function mdc-verify-feature-query($feature-queries...) {
  @each $query in $feature-queries {
    @if type-of($query) == map {
      $op: map-get($query, op);
      $sub-queries: map-get($query, queries);
      $valid: mdc-verify-feature-query($sub-queries...);

      @if not mdc-contains($mdc-all-feature-query-operators, $op) {
        @error "Invalid feature query operator: '#{$op}'. " +
          "Valid operators are: #{$mdc-all-feature-query-operators}";
      }
    } @else {
      $valid: mdc-verify-feature($query);
    }
  }

  @return true;
}

// Verified that the given feature targets are valid, throws an error otherwise.
@function mdc-verify-feature-target($feature-targets...) {
  @each $target in $feature-targets {
    @if type-of($target) != map {
      @error "Invalid feature target: '#{$target}'. Must be a map.";
    }

    $targeted-feature: map-get($target, target);
    $feature-query: map-get($target, query);
    $valid: mdc-verify-feature($targeted-feature) and mdc-verify-feature-query($feature-query);
  }

  @return true;
}

// Creates a feature target from the given feature query and targeted feature.
@function mdc-create-feature-target($feature-query, $targeted-feature) {
  $feature-target: (target: $targeted-feature, query: $feature-query);
  $valid: mdc-verify-feature-target($feature-target);

  @return $feature-target;
}

// Parses a list of feature targets to produce a map containing the feature query and list of
// available features.
@function mdc-parse-feature-targets($feature-targets) {
  $valid: mdc-verify-feature-target($feature-targets...);
  $available-features: ();

  @each $target in $feature-targets {
    $available-features: append($available-features, map-get($target, target));
  }

  @return (
    available: $available-features,
    query: map-get(nth($feature-targets, 1), query)
  );
}

// Creates a feature query that is satisfied iff all of its sub-queries are satisfied.
@function mdc-all($feature-queries...) {
  $valid: mdc-verify-feature-query($feature-queries...);

  @return (
    op: all,
    queries: $feature-queries
  );
}

// Creates a feature query that is satisfied iff any of its sub-queries are satisfied.
@function mdc-any($feature-queries...) {
  $valid: mdc-verify-feature-query($feature-queries...);

  @return (
    op: any,
    queries: $feature-queries
  );
}

// Creates a feature query that is satisfied iff its sub-query is not satisfied.
@function mdc-without($feature-query) {
  $valid: mdc-verify-feature-query($feature-query);

  @return (
    op: without,
    queries: ($feature-query)
  );
}

// Checks whether the given feature query is satisfied by the given list of available features.
@function mdc-is-feature-query-satisfied($feature-query, $available-features) {
  $valid: mdc-verify-feature-query($feature-query);
  $valid: mdc-verify-feature($available-features...);

  @if type-of($feature-query) == map {
    $op: map-get($feature-query, op);
    $sub-queries: map-get($feature-query, queries);

    @if $op == without {
      @return not mdc-is-feature-query-satisfied(nth($sub-queries, 1), $available-features);
    }

    @if $op == any {
      @each $sub-query in $sub-queries {
        @if mdc-is-feature-query-satisfied($sub-query, $available-features) {
          @return true;
        }
      }

      @return false;
    }

    @if $op == all {
      @each $sub-query in $sub-queries {
        @if not mdc-is-feature-query-satisfied($sub-query, $available-features) {
          @return false;
        }
      }

      @return true;
    }
  }

  @return mdc-contains($available-features, $feature-query);
}
